# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS CloudFormation template that deploys the ASA Notifier Module and the ASA IAM Access Keys Auto-Rotation Function."

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment Configurations
        Parameters:
          - S3BucketName
          - S3BucketPrefix
          - IAMRoleName
          - ExecutionRoleName
          - InventoryExecutionRoleName
          - DryRunFlag
          - OrgListAccount
          - OrgListRole
          - StoreSecretsInCentralAccount
          - CredentialReplicationRegions
          - RunLambdaInVPC
          - VpcId
          - VpcCidr
          - SubnetId
      - Label:
          default: Configure ASA Notifier Module
        Parameters:
          - AdminEmailAddress
          - ResourceOwnerTag
          - AWSOrgID
          - EmailTemplateAudit
          - EmailTemplateEnforce
          - SMTPUserParamName
          - SMTPPasswordParamName
      - Label:
          default: Configure ASA IAM Key Rotation Exemption Group
        Parameters:
          - IAMExemptionGroup
      - Label:
          default: Configure ASA IAM Key Rotation Parameters
        Parameters:
          - RotationPeriod
          - InactiveBuffer
          - InactivePeriod
          - RecoveryGracePeriod
    ParameterLabels:
      # Deployment Configuration
      S3BucketName:
        default: CloudFormation S3 Bucket Name
      S3BucketPrefix:
        default: CloudFormation S3 Bucket Prefix
      IAMRoleName:
        default: Assumed IAM Role Name
      ExecutionRoleName:
        default: IAM Execution Role Name
      InventoryExecutionRoleName:
        default: Inventory Execution Role Name
      DryRunFlag:
        default: 'Dry Run Flag (Audit Mode)'
      OrgListAccount:
        default: Account to List Organization Accounts
      OrgListRole:
        default: List Accounts Role Name
      StoreSecretsInCentralAccount:
        default: Secrets Store flag for central account
      CredentialReplicationRegions:
        default: Regions to replicate the Credentials
      RunLambdaInVPC:
        default: Run Lambda in VPC
      VpcId:
        default: VPC Id for Lambda functions
      VpcCidr:
        default: VPC CIDR for Security Group Rule
      SubnetId:
        default: Subnet Id for Lambda functions
      # Notifier Settings
      AdminEmailAddress:
        default: Admin Email Address
      ResourceOwnerTag:
        default: Resource Owner Tag
      AWSOrgID:
        default: AWS Organization ID
      EmailTemplateEnforce:
        default: 'Email Template File Name [Enforce Mode]'
      EmailTemplateAudit:
        default: 'Email Template File Name [Audit Mode]'
      SMTPUserParamName:
        default: 'SMTP User SSM Parameter Name in case running Lambda in VPC'
      SMTPPasswordParamName:
        default: 'SMTP Password SSM Parameter Name in case running Lambda in VPC'
      # IAM Rotation Settings
      IAMExemptionGroup:
        default: IAM Exemption Group
      #Date/Time Thresholds
      InactiveBuffer:
        default: Inactive Buffer
      RotationPeriod:
        default: Rotation Period
      InactivePeriod:
        default: Inactive Period
      RecoveryGracePeriod:
        default: Recovery Grace Period
Parameters:
  S3BucketName:
    Description: "S3 Bucket Name where code is located, see the documentation for bucket names https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html"
    Type: String
    Default: ""
  S3BucketPrefix:
    Description: "The prefix or directory where resources will be stored."
    Type: String
    Default: "asa/asa-iam-rotation"
  AdminEmailAddress:
    Description: "Email address that will be used in the 'sent from' section of the email."
    Type: String
    Default: ""
  ResourceOwnerTag:
    Description: "(Optional) Tag key used to indicate the owner of an IAM user resource."
    Type: String
    Default: ""
  AWSOrgID:
    Description: "Enter your AWS Organization ID, this will be used to restricted execution permissions to only approved AWS Accounts within your AWS Organization."
    Type: String
    Default: ""
  IAMExemptionGroup:
    Description: "Manage IAM Key Rotation exemptions via an IAM Group. Enter the IAM Group name being used to facilitate IAM accounts excluded from auto-key rotation."
    Type: String
    Default: IAMKeyRotationExemptionGroup
  IAMRoleName:
    Description: "Enter the name of IAM Role that the main ASA-iam-key-auto-rotation-and-notifier-solution.yaml CloudFormation template will assume."
    Type: String
    Default: "asa-iam-key-rotation-lambda-assumed-role"
  ExecutionRoleName:
    Description: "Enter the name of IAM Execution Role that will assume the sub-account role for Lambda Execution."
    Type: String
    Default: "asa-iam-key-rotation-lambda-execution-role"
  InventoryExecutionRoleName:
    Description: "Enter the name of IAM Execution Role used by the account inventory Lambda."
    Type: String
    Default: "asa-iam-key-rotation-account-inventory-lambda-execution-role"
  OrgListAccount:
    Description: "Enter the account ID of the account that will be used to list Organization accounts"
    Type: String
    Default: ""
  OrgListRole:
    Description: "Enter the role that will be used to list Organization accounts"
    Type: String
    Default: "asa-iam-key-rotation-list-accounts-role"
  EmailTemplateEnforce:
    Description: "Enter the file name of the email html template to be sent out by the Notifier Module for Enforce Mode. Note: Must be located in the 'S3 Bucket Prefix/Template/template_name.html' folder"
    Type: String
    Default: "iam-auto-key-rotation-enforcement.html"
  EmailTemplateAudit:
    Description: "Enter the file name of the email html template to be sent out by the Notifier Module for Audit Mode. Note: Must be located in the 'S3 Bucket Prefix/Template/template_name.html' folder"
    Type: String
    Default: "iam-auto-key-rotation-enforcement.html"
  SMTPUserParamName:
    Description: "Enter the SSM param name for SMTP User name, , this is required for Notifier Lambda to send an email"
    Type: String
    Default: "/iam-key-rotation/smtp/user"
  SMTPPasswordParamName:
    Description: "Enter the SSM param name for SMTP Password, this is required for Notifier Lambda to send an email"
    Type: String
    Default: "/iam-key-rotation/smtp/password"
  RotationPeriod:
    Description: "The number of days after which a key should be rotated (rotating from active to inactive)."
    Type: Number
    Default: 90
  InactivePeriod:
    Description: "The number of days after which to inactivate keys that had been rotated (Note: This must be greater than RotationPeriod)."
    Type: Number
    Default: 100
  InactiveBuffer:
    Description: "The grace period between rotation and deactivation of a key."
    Type: Number
    Default: 10
  RecoveryGracePeriod:
    Description: "Recovery grace period between deactivation and deletion."
    Type: Number
    Default: 10
  DryRunFlag:
    Description: "Enables/Disables key rotation functionality. 'True' only sends notifications to end users (Audit Mode). 'False' preforms key rotation and sends notifications to end users (Remediation Mode)."
    Type: String
    Default: "True"
    AllowedValues:
      - "True"
      - "False"
  StoreSecretsInCentralAccount:
    Description: "Select True to store secrets in central account, select False to store in respective account"
    Type: String
    Default: "False"
    AllowedValues:
      - "True"
      - "False"
  CredentialReplicationRegions:
    Description: "Please provide the comma separated regions where you want to replicate the credentials (Secret Manager), e.g. us-east-2,us-west-1,us-west-2 Please skip the region where you are creating stack"
    Type: String
  RunLambdaInVPC:
    Description: "Select True if you want to run Lambda in VPC, You need to have VPC Endpoints created, and also attach NAT Gateway to the subnet in which you are creating Lambda. https://aws.amazon.com/premiumsupport/knowledge-center/internet-access-lambda-function/"
    Type: String
    Default: "False"
    AllowedValues:
      - "True"
      - "False"
  VpcId:
    Type: String
    Description: "Please enter VPC Id for Lambda Functions"
  VpcCidr:
    Type: String
    Default: "0.0.0.0/0"
    Description: "Please enter VPC CIDR for Security Group rule"
  SubnetId:
    Type: String
    Description: "Please enter Subnet Id for corresponding VPC  for Lambda Functions"
Conditions:
  runInVPC: !Equals [!Ref RunLambdaInVPC, "True"]

Resources:
  ##################################################################
  # [ASA Notifier Module] Lambda Role & Function
  ##################################################################
   KeyRoationLambdaSG:
    Condition: runInVPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Lambdas
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref VpcCidr
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
   NotifierFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowExecutionPermissionsOnFunction
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMFullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess"
      Policies:
        - PolicyName: AllowNotiferToGetEmailTemplate
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowFunctionAccessToEmailTemplates
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}/${S3BucketPrefix}/Template/*' # Only allow access to Email Template Bucket
                Condition:
                  StringEquals:
                    aws:PrincipalOrgID: !Ref AWSOrgID
              - Sid: AllowFunctionToSendEmail
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/*' # Allow role to send email on behalf of admin email identity
   NotifierLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Function that received SNS events from config rules and emails end users who own the account id of the resource violation.
      FunctionName: ASA-Notifier
      Handler: main.lambda_handler
      Runtime: python3.8
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub ${S3BucketPrefix}/Lambda/notifier.zip
      Role: !GetAtt NotifierFunctionExecutionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          ADMIN_EMAIL: !Ref AdminEmailAddress
          S3_BUCKET_NAME: !Ref S3BucketName
          S3_BUCKET_PREFIX: !Ref S3BucketPrefix
          RunLambdaInVPC: !Ref RunLambdaInVPC
          SMTPUserParamName: !If [runInVPC, !Ref SMTPUserParamName, !Ref "AWS::NoValue"]
          SMTPPasswordParamName: !If [runInVPC, !Ref SMTPPasswordParamName, !Ref "AWS::NoValue"]
      VpcConfig:
        !If
          - runInVPC
          -
            SecurityGroupIds:
              - !Ref KeyRoationLambdaSG
            SubnetIds:
              - !Ref SubnetId
          - !Ref "AWS::NoValue"
  ##################################################################
  # [AWS IAM Access Keys Rotation Module] Lambda Role & Function
  ##################################################################
   RotationLambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: NotifierLambdaFunction
    Properties:
      RoleName: !Ref ExecutionRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowExecutionPermissionsOnFunction
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess"
      Policies:
        - PolicyName: AllowRotationFunctionPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub 'arn:${AWS::Partition}:iam::*:role/${IAMRoleName}' # All accounts in Org
                  - !Sub 'arn:${AWS::Partition}:iam::*:role/${OrgListRole}' # All accounts in Org
                Condition:
                  StringEquals:
                    aws:PrincipalOrgID: !Ref AWSOrgID
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt NotifierLambdaFunction.Arn
        - PolicyName: AllowSecretsManagerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:PutResourcePolicy
                  - secretsmanager:PutSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:CreateSecret
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:ReplicateSecretToRegions
                Resource:
                  - !Sub "arn:${AWS::Partition}:secretsmanager:*:${AWS::AccountId}:secret:*"
   AccessKeyRotateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: ASA Function to rotate IAM Access Keys on specified schedule
      FunctionName: ASA-IAM-Access-Key-Rotation-Function
      Handler: main.lambda_handler
      Runtime: python3.8
      Role: !GetAtt RotationLambdaFunctionExecutionRole.Arn
      Timeout: 400
      VpcConfig:
        !If
          - runInVPC
          -
            SecurityGroupIds:
              - !Ref KeyRoationLambdaSG
            SubnetIds:
              - !Ref SubnetId
          - !Ref "AWS::NoValue"
      Environment:
        Variables:
          DryRunFlag: !Ref DryRunFlag
          RotationPeriod: !Ref RotationPeriod
          InactivePeriod: !Ref InactivePeriod
          InactiveBuffer: !Ref InactiveBuffer
          RecoveryGracePeriod: !Ref RecoveryGracePeriod
          IAMExemptionGroup: !Ref IAMExemptionGroup
          IAMAssumedRoleName: !Ref IAMRoleName
          RoleSessionName: 'ASA-IAM-Access-Key-Rotation-Function'
          Partition: !Sub ${AWS::Partition}
          NotifierArn: !GetAtt NotifierLambdaFunction.Arn
          EmailTemplateEnforce: !Ref EmailTemplateEnforce
          EmailTemplateAudit: !Ref EmailTemplateAudit
          ResourceOwnerTag: !Ref ResourceOwnerTag
          StoreSecretsInCentralAccount: !Ref StoreSecretsInCentralAccount
          CredentialReplicationRegions: !Ref CredentialReplicationRegions
          RunLambdaInVPC: !Ref RunLambdaInVPC
          OrgListAccount: !Ref OrgListAccount
          OrgListRole: !Ref OrgListRole
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub ${S3BucketPrefix}/Lambda/access_key_auto_rotation.zip
  ##################################################################
  # Permissions to allow RotationLambdaFunction to Invoke Notifier
  #    Lambda Function 
  ##################################################################
   RotationAccessKeyRotateLambdaInvokeLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotifierLambdaFunction
      Action: lambda:InvokeFunction
      Principal: !Sub ${AWS::AccountId}
      SourceArn: !Sub 'arn:${AWS::Partition}:sts::${AWS::AccountId}:assumed-role/${ExecutionRoleName}/${AccountInventoryLambdaFunction}'

  ##################################################################
  # [AWS Account & Email Inventory Module] Lambda Role & Function
  ##################################################################
   AccountInventoryFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref InventoryExecutionRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowExecutionPermissionsOnFunction
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess"
      Policies:
        - PolicyName: AllowAWSOrgAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub 'arn:${AWS::Partition}:iam::${OrgListAccount}:role/${OrgListRole}'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt AccessKeyRotateLambdaFunction.Arn
   AccountInventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Function that calls the DescribeAccount & ListAccounts on AWS Organizations to collect all AWS Account IDs and corresponding Emails."
      FunctionName: ASA-Account-Inventory
      Handler: main.lambda_handler
      Runtime: python3.8
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub ${S3BucketPrefix}/Lambda/account_inventory.zip
      Role: !GetAtt AccountInventoryFunctionExecutionRole.Arn
      Timeout: 300
      VpcConfig:
        !If
          - runInVPC
          -
            SecurityGroupIds:
              - !Ref KeyRoationLambdaSG
            SubnetIds:
              - !Ref SubnetId
          - !Ref "AWS::NoValue"
      Environment:
        Variables:
            LambdaRotationFunction: !Ref AccessKeyRotateLambdaFunction
            OrgListAccount: !Ref OrgListAccount
            OrgListRole: !Ref OrgListRole
            RoleSessionName: 'ASA-IAM-Access-Account-Inventory-Function'
            RunLambdaInVPC: !Ref RunLambdaInVPC

   AccountInventoryTriggerLambdaPermissions:
    Type: AWS::Lambda::Permission
    DependsOn: AccountInventoryLambdaFunction
    Properties:
      FunctionName: !Ref AccessKeyRotateLambdaFunction
      Action: lambda:InvokeFunction
      Principal: !Sub ${AWS::AccountId}
      SourceArn: !Sub 'arn:${AWS::Partition}:sts::${AWS::AccountId}:assumed-role/${ExecutionRoleName}/${AccountInventoryLambdaFunction}'

  ##################################################################
  # CloudWatch event trigger to run AccountInventoryFunction 
  #   Function on a schedule. rate(24 hours) = Once a Day
  ##################################################################
   RotationCloudWatchEventLambdaTrigger:
    Type: AWS::Events::Rule
    DependsOn: AccountInventoryLambdaFunction
    Properties:
      Description: CloudWatch Event to trigger Access Key auto-rotation Lambda Function daily
      ScheduleExpression: rate(24 hours)
      State: ENABLED
      Targets:
        - Arn: !GetAtt AccountInventoryLambdaFunction.Arn
          Id: AccountInventoryLambdaFunction
   RotationCloudWatchEventLambdaTriggerLambdaPermissions:
    Type: AWS::Lambda::Permission
    DependsOn: RotationCloudWatchEventLambdaTrigger
    Properties:
      FunctionName: !Ref AccountInventoryLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RotationCloudWatchEventLambdaTrigger.Arn

#  SNSTopic:
#    Type: AWS::SNS::Topic
#    Properties:
#      TopicName: !Sub 'sns-${AWS::StackName}'
#      Subscription:
#        - Endpoint: !Ref AdminEmailAddress
#          Protocol: "email"
#
#  EventTopicPolicy:
#    Type: 'AWS::SNS::TopicPolicy'
#    Properties:
#      PolicyDocument:
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: events.amazonaws.com
#            Action: 'sns:Publish'
#            Resource: '*'
#      Topics:
#        - !Ref SNSTopic

##################################################################
# Output section
##################################################################
Outputs:
   oAccountInventoryLambdaFunction:
    Description: "Step 1 - Lambda that dynamically collects all AWS Account IDs in an AWS organization."
    Value: !GetAtt AccountInventoryLambdaFunction.Arn
   oAccessKeyRotateLambdaFunction:
    Description: "Step 2 - Lambda that dynamically audits and rotates old IAM access keys."
    Value: !GetAtt AccessKeyRotateLambdaFunction.Arn
   oNotifierLambdaFunction:
    Description: "Step 3 - Lambda that sends an email notification if a key is rotated."
    Value: !GetAtt NotifierLambdaFunction.Arn